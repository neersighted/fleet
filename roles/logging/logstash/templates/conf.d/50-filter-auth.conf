filter {
  if [type] == "auth" {
    # Strip out the real message.
    grok {
      match => { "message" => "%{SYSLOGPREFIX}: %{GREEDYDATA:message}" }
      overwrite => [ "message" ]
    }

    grok {
      match => { "message" => "Accepted %{DATA:method} for %{USERNAME:user} from %{IPORHOST:src_ip} port %{POSINT:src_port} ssh2" }
      add_field => { "event" => "ssh" }
    }
    grok {
      match => {
        "message" => "Connection closed by %{IP:src_ip}"
        "message" => "Received disconnect from %{IP:src_ip}"
      }
      add_field => { "event" => "ssh_disconnect" }
    }
    grok {
      match => {
        "message" => "Disconnecting: Too many authentication failures for %{USER:user}"
        "message" => "Disconnecting: Change of username or service not allowed: \(%{USERNAME:user},ssh-connection\) -> \(%{USERNAME:newuser},ssh-connection\)"
        "message" => "Failed %{DATA:method} for %{USERNAME:user} from %{IPORHOST:src_ip} port %{POSINT:src_port} ssh2"
      }
      add_field => { "event" => "ssh_fail" }
    }
    grok {
      match => { "message" => "Invalid user %{USERNAME:user} from %{IP:src_ip}" }
      add_field => { "event" => "ssh_invalid" }
    }

    grok {
      match => {
        "message" => "%{USERNAME:user} : TTY=%{DATA:tty} ; PWD=%{UNIXPATH} ; USER=%{USERNAME:newuser} ; TSID=%{DATA:tsid} ; COMMAND=%{GREEDYDATA:command}"
        "message" => "%{USERNAME:user} : TTY=%{DATA:tty} ; PWD=%{UNIXPATH} ; USER=%{USERNAME:newuser} ; COMMAND=%{GREEDYDATA:command}"
      }
      add_field => { "event" => "sudo" }
    }
    grok {
      match => { "message" => "%{USERNAME:user} : \(command continued\) %{GREEDYDATA:command}" }
      add_field => { "event" => "sudo_cont" }
    }
    grok {
      match => { "message" => "%{USERNAME:user} : %{POSINT} incorrect password attempts ; TTY=%{DATA:tty} ; PWD=%{UNIXPATH} ; USER=%{USERNAME:newuser} ; COMMAND=%{GREEDYDATA:command}" }
      add_field => { "event" => "sudo_fail" }
    }

    grok {
      match => { "message" => "Successful su for %{USERNAME:newuser} by %{USERNAME:user}" }
      add_field => { "event" => "su" }
    }
    grok {
      match => { "message" => "FAILED su for %{USERNAME:newuser} by %{USERNAME:user}" }
      add_field => { "event" => "su_fail" }
    }

    # Redundant!
    if [message] =~ /^input_userauth_request: invalid user/ {
      drop { }
    }
    # Useless!
    if [message] =~ /reverse mapping checking getaddrinfo/ {
      drop { }
    }
    # Useless!
    if [message] =~ /^Address \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3} maps to (\w+\.)+\w+/ {
      drop { }
    }
    # Useless!
    if [message] =~ /^Did not receive identification string/ {
      drop { }
    }

    # Useless!
    if [message] =~ /^(\+|\-) \/dev/ {
      drop { }
    }

    # Redundant!
    if [message] =~ /^pam_unix/ {
      drop { }
    }
    # Redundant!!
    if [message] =~ /^pam_authenticate/ {
      drop { }
    }


    # If there is no event type, set the default.
    if ![event] {
      mutate {
        add_field => { "event" => "other" }
      }
    }

    # Sometimes we want to fail...
    mutate {
      remove_tag => [ "_grokparsefailure" ]
    }


    geoip {
      source => "src_ip"
    }

    date {
      locale       => "en"
      timezone     => "{{ timezone }}"
      match        => [ "timestamp", "ISO8601", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      remove_field => [ "timestamp" ]
    }
  }
}
