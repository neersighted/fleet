statsd_enabled = False
metricsd_enabled = False


collectd_enabled = True
collectd_ip = '0.0.0.0'
collectd_port = 25826

class AggregationConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    data = [
      sample['type'],
      sample['plugin_instance'].replace(sample['type'] + '-', ''),
      sample['type_instance']
    ]
    return [field for field in data if field and field.strip()]
class CPUConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    data = [
      'cpu',
      sample['plugin_instance'],
      sample['type_instance']
    ]
    return [field for field in data if field and field.strip()]
class DFConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    data = [
      'df',
      sample['plugin_instance'],
      sample['type_instance']
    ]
    return [field for field in data if field and field.strip()]
class DiskConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    data = [
      'disk',
      sample['plugin_instance'],
      sample['type'].replace('disk_', '')
    ]
    return [field for field in data if field and field.strip()]
class InterfaceConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    data = [
      'interface',
      sample['plugin_instance'],
      sample['type'].replace('if_', ''),
      sample['value_name']
    ]
    return [field for field in data if field and field.strip()]
class MemoryConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    data = [
      "memory",
      sample["type_instance"]
    ]
    return [field for field in data if field and field.strip()]
class NetlinkConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    data = [
      'netlink',
      sample['plugin_instance'],
      sample['type'].replace('if_', ''),
      sample['value_name']
    ]
    return [field for field in data if field and field.strip()]
class NginxConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    if sample['type'] == 'nginx_requests':
      sample['type_instance'] = 'requests'
    data = [
      'nginx',
      sample['type_instance']
    ]
    return [field for field in data if field and field.strip()]
class NTPdConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    data = [
      'ntpd',
      sample['type'],
      sample['type_instance'].replace('.', '_')
    ]
    return [field for field in data if field and field.strip()]
class ProcessesConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    if sample['type'] == 'fork_rate':
      sample['type_instance'] = 'forks'
    data = [
      'processes',
      sample['type_instance']
    ]
    return [field for field in data if field and field.strip()]
class PingConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    if sample['type'] == 'ping':
      sample['type'] = 'rtt'
    data = [
      'ping',
      sample['type'].replace('ping_', ''),
      sample['type_instance'].replace('.', '_')
    ]
    return [field for field in data if field and field.strip()]
class SwapConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    data = [
      'swap',
      sample['type_instance']
    ]
    return [field for field in data if field and field.strip()]
class UnboundConverter(object):
  PRIORITY = 0
  def __call__(self, sample):
    data = [
      'unbound',
      sample['plugin_instance'],
      sample['type'].replace('unbound_', ''),
      sample['type_instance']
    ]
    return [field for field in data if field and field.strip()]

collectd_use_entry_points = False
collectd_converters = {
  'aggregation': AggregationConverter(),
  'cpu'        : CPUConverter(),
  'df'         : DFConverter(),
  'disk'       : DiskConverter(),
  'interface'  : InterfaceConverter(),
  'memory'     : MemoryConverter(),
  'netlink'    : NetlinkConverter(),
  'nginx'      : NginxConverter(),
  'ntpd'       : NTPdConverter(),
  'processes'  : ProcessesConverter(),
  'ping'       : PingConverter(),
  'swap'       : SwapConverter(),
  'unbound'    : UnboundConverter()
}

collectd_types = [
  '/usr/share/collectd/types.db',
  '/etc/collectd/types.db'
]


name_prefix = 'systems'
name_postfix = None

name_replace_char = '_'
name_strip_duplicates = True
name_host_trim = ['{{ strip }}']


graphite_ip = '{{ graphite.host }}'
graphite_port = {{ graphite.port }}

graphite_max_reconnects = 3
graphite_reconnect_delay = 5
graphite_backoff_factor = 1.5
graphite_backoff_max = 60
